[AOP개요]
=> Aspect Oriented Programming(관심지향프로그래밍)
=> 공통관심사항(cross-cutting concern)과 핵심관심사항(core concern)분리
   ---------------------------      -----------------------
    부가기능                               비지니스로직(업무로직)
    많은 곳에서 사용하는 기능
    로깅, 트랜잭션, 보안....
=> 공통기능과 핵심기능을 분리해서 각각의 클래스로 작성한 후 적절한 시점에 적절한 핵심로직이 실행될때 공통기능이 같이 실행되도록 처리
    
[AOP를 적용하기 위해 필요한 것]
 - 대상
   공통기능을 적용할 핵심 로직을 담고 있는 메소드
   
 - Advice 
   공통기능을 구현한 클래스
   
 - 포인트컷 
   : aop를 실행하기 위해서 타겟이 어떤 것인지 정의하기 위한 표현식
	execution(정규표현식)
	execution([접근제어자] 리턴타입 패키지명.클래스명.메소드명(매개변수))
	
	execution(void com.multi.erp
	
	공통
	*  => 어떤 문자열이 와도 좋다.
	.. => 없거나 1이거나 모든것에 
	리턴타입
	 *  => 모든 리턴타입을 의미
	void => void메소드
	int => int를 리턴하는 메소드
	!void => void가 아닌 모든 메소드
	
	패키지
	 com.multi.erp는 com.multi.erp패키지라는 것을 정확하게 명시
	 com.multi.erp.. => com.multi.erp로 시작하는 모든 패키지
	 com.multi.erp.*.get* => com.multi.erp패키지의 모든 클래스에서 get으로 시작하는 메소드에 적용
	 com.multi.erp.*.*.get* =>com.multi.erp패키지로 시작하는 4단계 패키지의 모든 클래스에서 get으로 시작하는 메소드
	
	메소드
	*(..) => 모든 메소드
	get*(..) => get으로 시작하는 모든 메소드
	
	매개변수
	(..) => 모든 매개변수 
	(*) => 매개변수1개 짜리 메소드
	(Integer,..) => 한 개 이상의 매개변수를 갖는 메소드 단, 첫 번째 매개변수는 타입이 Integer
	(Integer,*) => 두 개의 매개변수를 갖는 메소드 단, 첫 번째 매개변수는 타입이 Integer
	
	
	
	
	
	
	
	
	
	
	
	